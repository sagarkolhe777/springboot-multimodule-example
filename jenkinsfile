pipeline {
    agent any
    
    environment {
        BRANCH_NAME = 'master'
	// This can be nexus3 or nexus2
        NEXUS_VERSION = "nexus3"
        // This can be http or https
        NEXUS_PROTOCOL = "http"
        // Where your Nexus is running
        NEXUS_URL = "localhost:8081"
        // Repository where we will upload the artifact
        NEXUS_REPOSITORY = "maven-snapshots"
        // Jenkins credential id to authenticate to Nexus OSS
        NEXUS_CREDENTIAL_ID = "nexus-credentials"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: "${BRANCH_NAME}" ]],
                         userRemoteConfigs: [[credentialsId: 'git-hub-credentials', url: 'https://github.com/sagarkolhe777/sample-maven-app.git']]])
                echo "Checkout Done"
            }
        }    
        stage('Compile') {
            steps {
               bat 'mvn clean compile'
               echo 'Comile Done'
            }
        }
       // stage("SonarQube Analysis") {
         //   steps {
           //   withSonarQubeEnv('SonarQube') {
             //   bat 'mvn clean package sonar:sonar'
              //  echo 'SonarQube Analysis Done'  
             // }
           // }
        //}
        //stage("Quality Gate") {
          //  steps {
            //  timeout(time: 1, unit: 'HOURS') {
            //    waitForQualityGate abortPipeline: true
            //  }
           // }
        //}
        stage('Test') {
            steps {
               bat 'mvn test'
               echo 'Test Done'
            }
        }
        stage('Build') {
            steps {
               bat 'mvn clean install'
               echo 'Build Done'
            }
        }
	stage("publish to nexus") {
            steps {
                script {
                    // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
                    pom = readMavenPom file: "pom.xml";
                    // Find built artifact under target folder
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    // Print some info from the artifact found
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    // Extract the path from the File found
                    artifactPath = filesByGlob[0].path;
                    // Assign to a boolean response verifying If the artifact name exists
                    artifactExists = fileExists artifactPath;

                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";

                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                // Artifact generated such as .jar, .ear and .war files.
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],

                                // Lets upload the pom.xml file for additional information for Transitive dependencies
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );

                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
    }    
    }
    	
    post { 
		always { 
			echo 'One way or another, I have finished'
		}
		aborted{
			sleep(1)
			script{currentBuild.result='ABORTED'}
		}
		failure{
			sleep(1)
			script{currentBuild.result='FAILURE'}
		}
		success{
			sleep(1)
			script{currentBuild.result='SUCCESS'}
		}
	}	
}
